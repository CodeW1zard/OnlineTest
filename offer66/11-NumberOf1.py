'''
输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。

正数的补码等于数字本身
负数的补码等于其相反数取反加1
（8bit补码):
1
0|0 0 0 0 0 0 1

-1
1|1 1 1 1 1 1 1
'''
class Solution:
    def NumberOf1(self, n):
        count = 0
        # 将n用补码形式表示（正数不变，负数前面会加一个1表示负号）
        if n < 0:
            n = n & 0xffffffff
        while n != 0:
            print("{} : {}".format(n, bin(n)))
            print("{} : {}".format(n-1, bin(n-1)))
            n = n & (n - 1)
            print("{} : {}".format(n, bin(n)))
            count += 1
        return count

def test():
    cases = [
        12
    ]
    sol = Solution()
    for case in cases:
        print("%d : %d " % (case, sol.NumberOf1(case)))

'''
当n为2的幂次时，n & (n-1) = 0
否则 n & (n-1) != 0
  1000 0000 0000 0000
&  111 1111 1111 1111
  ==== ==== ==== ====
= 0000 0000 0000 0000

n      n    n-1   n&(n-1)
--   ----   ----   -------
 0   0000   0111    0000 *
 1   0001   0000    0000 *
 2   0010   0001    0000 *
 3   0011   0010    0010
 4   0100   0011    0000 *
 5   0101   0100    0100
 6   0110   0101    0100
 7   0111   0110    0110
 8   1000   0111    0000 *
 9   1001   1000    1000
10   1010   1001    1000
11   1011   1010    1010
12   1100   1011    1000
13   1101   1100    1100
14   1110   1101    1100
15   1111   1110    1110
'''